{"version":3,"file":"static/js/156.2bf8d174.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\" />\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br />\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t// process.env.PUBLIC_URL + '/error.gif'\r\n\t\t<img style={{\r\n\t\t\tdisplay: 'block', width: \"250px\",\r\n\t\t\theight: \"250px\", objectFit: 'contain',\r\n\t\t\tmargin: \"0 auto\"\r\n\t\t}} src={img} alt=\"Error\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n\tconst { id } = useParams();\r\n\tconst [data, setData] = useState(null);\r\n\tconst { loading, error, getComic, getCharacter, clearError } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateData()\r\n\t}, [id])\r\n\r\n\tconst updateData = () => {\r\n\t\tclearError();\r\n\r\n\t\tswitch (dataType) {\r\n\t\t\tcase 'comic':\r\n\t\t\t\tgetComic(id).then(onDataLoaded);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'character':\r\n\t\t\t\tgetCharacter(id).then(onDataLoaded);\r\n\t\t}\r\n\t}\r\n\r\n\tconst onDataLoaded = (data) => {\r\n\t\tsetData(data);\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\tconst spinner = loading ? <Spinner /> : null;\r\n\tconst content = !(loading || error || !data) ? <Component data={data} /> : null;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<AppBanner />\r\n\t\t\t{errorMessage}\r\n\t\t\t{spinner}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default SinglePage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, { method, body, headers });\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn { loading, request, error, clearError }\r\n}","\r\n// import md5 from 'md5';\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n\tconst { loading, request, error, clearError } = useHttp();\r\n\r\n\t// _apiBase = 'https://gateway.marvel.com/v1/public/';// Marvel\r\n\t// _apiPublicKey = '2a74b8ec54e23524fad42d9ef7083ae1';// Marvel\r\n\t// _apiPrivateKey = '946d7fc8d27a238be0a5c79e2ad75a73e9531a3d';// Marvel\r\n\t// _baseOffset = 210;// Marvel\r\n\t// apiTs = Date.now().toString();// Marvel\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';// Резервный\r\n\tconst _apiPublicKey = 'd4eecb0c66dedbfae4eab45d312fc1df';// Резервный\r\n\tconst _baseOffset = 1;// Резервный\r\n\r\n\t// constructor() {\r\n\t// \tthis._apiHash = md5(this.apiTs + this._apiPrivateKey + this._apiPublicKey);\r\n\t// }\r\n\r\n\t// _generateHash = () => {\r\n\t// \tthis.apiTs = Date.now().toString();\r\n\t// \tthis._apiHash = md5(\r\n\t// \t\tthis.apiTs +\r\n\t// \t\tthis._apiPrivateKey +\r\n\t// \t\tthis._apiPublicKey\r\n\t// \t);\r\n\t// }\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&apikey=${_apiPublicKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\t// this._generateHash();\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiPublicKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\t// this._generateHash();\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?&apikey=${_apiPublicKey}`);\r\n\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiPublicKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiPublicKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? `${char.description.slice(0, 19)}...` : 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic, getCharacterByName }\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiPublicKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}