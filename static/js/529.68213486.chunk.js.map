{"version":3,"file":"static/js/529.68213486.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t// process.env.PUBLIC_URL + '/error.gif'\r\n\t\t<img style={{\r\n\t\t\tdisplay: 'block', width: \"250px\",\r\n\t\t\theight: \"250px\", objectFit: 'contain',\r\n\t\t\tmargin: \"0 auto\"\r\n\t\t}} src={img} alt=\"Error\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './singleComicPage.scss';\r\n\r\n\r\nconst SingleComicPage = () => {\r\n\r\n\tconst { comicId } = useParams();\r\n\tconst [comic, setComic] = useState(null);\r\n\r\n\tconst { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateComic()\r\n\t}, [comicId])\r\n\r\n\tconst updateComic = () => {\r\n\t\tclearError();\r\n\t\tgetComic(comicId)\r\n\t\t\t.then(onComicLoaded)\r\n\t}\r\n\r\n\tconst onComicLoaded = (comic) => {\r\n\t\tsetComic(comic);\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\tconst spinner = loading ? <Spinner /> : null;\r\n\tconst content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{errorMessage}\r\n\t\t\t{spinner}\r\n\t\t\t{content}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst View = ({ comic }) => {\r\n\tconst { title, description, pageCount, thumbnail, language, price } = comic;\r\n\r\n\treturn (\r\n\t\t<div className=\"single-comic\">\r\n\t\t\t<img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n\t\t\t<div className=\"single-comic__info\">\r\n\t\t\t\t<h2 className=\"single-comic__name\">{title}</h2>\r\n\t\t\t\t<p className=\"single-comic__descr\">{description}</p>\r\n\t\t\t\t<p className=\"single-comic__descr\">{pageCount}</p>\r\n\t\t\t\t<p className=\"single-comic__descr\">Language: {language}</p>\r\n\t\t\t\t<div className=\"single-comic__price\">{price}</div>\r\n\t\t\t</div>\r\n\t\t\t<Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, { method, body, headers });\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn { loading, request, error, clearError }\r\n}","\r\n// import md5 from 'md5';\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n\tconst { loading, request, error, clearError } = useHttp();\r\n\r\n\t// _apiBase = 'https://gateway.marvel.com/v1/public/';// Marvel\r\n\t// _apiPublicKey = '2a74b8ec54e23524fad42d9ef7083ae1';// Marvel\r\n\t// _apiPrivateKey = '946d7fc8d27a238be0a5c79e2ad75a73e9531a3d';// Marvel\r\n\t// _baseOffset = 210;// Marvel\r\n\t// apiTs = Date.now().toString();// Marvel\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';// Резервный\r\n\tconst _apiPublicKey = 'd4eecb0c66dedbfae4eab45d312fc1df';// Резервный\r\n\tconst _baseOffset = 1;// Резервный\r\n\r\n\t// constructor() {\r\n\t// \tthis._apiHash = md5(this.apiTs + this._apiPrivateKey + this._apiPublicKey);\r\n\t// }\r\n\r\n\t// _generateHash = () => {\r\n\t// \tthis.apiTs = Date.now().toString();\r\n\t// \tthis._apiHash = md5(\r\n\t// \t\tthis.apiTs +\r\n\t// \t\tthis._apiPrivateKey +\r\n\t// \t\tthis._apiPublicKey\r\n\t// \t);\r\n\t// }\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\t// this._generateHash();\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiPublicKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\t// this._generateHash();\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?&apikey=${_apiPublicKey}`);\r\n\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiPublicKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiPublicKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? `${char.description.slice(0, 19)}...` : 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic }\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiPublicKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}