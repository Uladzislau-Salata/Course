{"version":3,"file":"static/js/224.6147a9f1.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t// process.env.PUBLIC_URL + '/error.gif'\r\n\t\t<img style={{\r\n\t\t\tdisplay: 'block', width: \"250px\",\r\n\t\t\theight: \"250px\", objectFit: 'contain',\r\n\t\t\tmargin: \"0 auto\"\r\n\t\t}} src={img} alt=\"Error\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (19 - 0) + 0);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br />\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = data;\r\n    let imgStyle = { 'objectFit': 'cover' };\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = { 'objectFit': 'contain' };\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charList.scss';\r\n\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner />;\r\n\r\n        case 'loading':\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n\r\n        case 'confirmed':\r\n            return <Component />;\r\n\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(1);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList([...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    // const nodeRef = useRef(null);\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = { 'objectFit': 'cover' };\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = { 'objectFit': 'unset' };\r\n            }\r\n\r\n            return (\r\n                <CSSTransition\r\n                    // nodeRef={nodeRef}\r\n                    key={item.id}\r\n                    timeout={500}\r\n                    classNames=\"char__item\"\r\n                // unmountOnExit\r\n                >\r\n\r\n                    <li\r\n                        className=\"char__item\"\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        key={item.id}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading);\r\n        // eslint-disable-next-line\r\n    }, [process])\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}\r\n            >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const { charId } = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\r\n    let imgStyle = { 'objectFit': 'cover' };\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = { 'objectFit': 'contain' };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle} />\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\tconst [char, setChar] = useState(null);\r\n\tconst { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = (name) => {\r\n\t\tclearError();\r\n\r\n\t\tgetCharacterByName(name)\r\n\t\t\t.then(onCharLoaded)\r\n\t\t\t.then(() => setProcess('confirmed'));\r\n\t}\r\n\r\n\tconst errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n\t\t\t\t<div className=\"inner\">To page</div>\r\n\t\t\t</Link>\r\n\t\t</div> :\r\n\t\t<div className=\"char__search-error\">\r\n\t\t\tThe character was not found. Check the name and try again\r\n\t\t</div>;\r\n\r\n\treturn (\r\n\t\t<div className=\"char__search-form\">\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tcharName: ''\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\tcharName: Yup.string().required('This field is required')\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit={({ charName }) => {\r\n\t\t\t\t\tupdateChar(charName);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tid=\"charName\"\r\n\t\t\t\t\t\t\tname='charName'\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tplaceholder=\"Enter name\" />\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tclassName=\"button button__main\"\r\n\t\t\t\t\t\t\tdisabled={process === 'loading'}>\r\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t\t{results}\r\n\t\t\t{errorMessage}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\t// static getDerivedStateFromError(error) {\r\n\t// \treturn { error: true };\r\n\t// }\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn <ErrorMessage />\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\tconst [selectedChar, setChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta name=\"description\" content=\"Marvel information portal\" />\r\n\t\t\t\t<title>Marvel information portal</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharSearchForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div >\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n\r\n\t\tsetProcess('loading');\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, { method, body, headers });\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\r\n\t\t\treturn data;\r\n\t\t} catch (e) {\r\n\t\t\tsetProcess('error');\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => {\r\n\t\tsetProcess('loading');\r\n\t}, []);\r\n\r\n\treturn { request, clearError, process, setProcess }\r\n}","\r\n// import md5 from 'md5';\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n\tconst { request, clearError, process, setProcess } = useHttp();\r\n\r\n\t// _apiBase = 'https://gateway.marvel.com/v1/public/';// Marvel\r\n\t// _apiPublicKey = '2a74b8ec54e23524fad42d9ef7083ae1';// Marvel\r\n\t// _apiPrivateKey = '946d7fc8d27a238be0a5c79e2ad75a73e9531a3d';// Marvel\r\n\t// _baseOffset = 210;// Marvel\r\n\t// apiTs = Date.now().toString();// Marvel\r\n\r\n\tconst _apiBase = 'https://marvel-server-zeta.vercel.app/';// Резервный\r\n\tconst _apiPublicKey = 'd4eecb0c66dedbfae4eab45d312fc1df';// Резервный\r\n\tconst _baseOffset = 1;// Резервный\r\n\r\n\t// constructor() {\r\n\t// \tthis._apiHash = md5(this.apiTs + this._apiPrivateKey + this._apiPublicKey);\r\n\t// }\r\n\r\n\t// _generateHash = () => {\r\n\t// \tthis.apiTs = Date.now().toString();\r\n\t// \tthis._apiHash = md5(\r\n\t// \t\tthis.apiTs +\r\n\t// \t\tthis._apiPrivateKey +\r\n\t// \t\tthis._apiPublicKey\r\n\t// \t);\r\n\t// }\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&apikey=${_apiPublicKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\t// this._generateHash();\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiPublicKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\t// this._generateHash();\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?&apikey=${_apiPublicKey}`);\r\n\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&apikey=${_apiPublicKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?apikey=${_apiPublicKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? `${char.description.slice(0, 19)}...` : 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tclearError,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t\tgetCharacterByName\r\n\t}\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n\tswitch (process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton />;\r\n\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner />;\r\n\r\n\t\tcase 'confirmed':\r\n\t\t\treturn <Component data={data} />;\r\n\r\n\t\tcase 'error':\r\n\t\t\treturn <ErrorMessage />;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error('Unexpected process state');\r\n\t}\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","CharSearchForm","getCharacterByName","errorMessage","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiPublicKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}